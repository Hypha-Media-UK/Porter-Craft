{% extends "_layout" %}

{% block content %}
    <div class="settings-page">
        <h1>Settings</h1>
        
        <div class="settings-navigation">
            <ul class="nav-tabs">
                <li class="nav-item"><a href="#staff-management" class="nav-link active" data-bs-toggle="tab">Staff Management</a></li>
                <li class="nav-item"><a href="#buildings-departments" class="nav-link" data-bs-toggle="tab">Buildings & Departments</a></li>
                <li class="nav-item"><a href="#task-types" class="nav-link" data-bs-toggle="tab">Task Types</a></li>
            </ul>
        </div>
        <div class="tab-content">
            <!-- Staff Management Tab -->
            <div class="tab-pane active" id="staff-management">
                <div class="settings-section">


    <div class="header-with-nav">
        <h1>Staff Management</h1>
        <div class="nav-links">
            <a href="{{ siteUrl('staff') }}" class="btn">← Back to Staff Management</a>
        </div>
    </div>

    {# Display existing supervisors #}
    <div class="supervisors-list">
        <h2>Existing Supervisors</h2>
        {% set supervisors = craft.entries()
            .section('supervisors')
            .orderBy('title asc')
            .all() %}

        {% if supervisors|length %}
            <table class="supervisors-table">
                <thead>
                    <tr>
                        <th>First Name</th>
                        <th>Surname</th>
                    </tr>
                </thead>
                <tbody>
                    {% for supervisor in supervisors %}
                        <tr>
                            <td><a href="{{ supervisor.url }}">{{ supervisor.title }}</a></td>
                            <td>{{ supervisor.fd_surname }}</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% else %}
            <p><em>No supervisors have been added yet.</em></p>
        {% endif %}
    </div>

    {# Form to add new supervisor #}
    <div class="add-supervisor-form">
        <h2>Add New Supervisor</h2>
        
        {% if success is defined %}
            <div class="notification success">
                Supervisor has been saved successfully!
            </div>
        {% endif %}

        {% set entry = entry is defined ? entry : craft.entries.section('supervisors').one() ?? create('craft\\elements\\Entry') %}
        
        <form method="post" accept-charset="UTF-8">
            {{ csrfInput() }}
            {{ actionInput('entries/save-entry') }}
            {{ redirectInput('success?slug={slug}') }}
            {{ hiddenInput('sectionId', craft.app.entries.getSectionByHandle('supervisors').id) }}
            {{ hiddenInput('typeId', craft.app.entries.getSectionByHandle('supervisors').entryTypes[0].id) }}
            {{ hiddenInput('enabled', '1') }}
            {{ hiddenInput('slug', '__temp_' ~ now|date('U')) }}
            {{ successMessageInput('Supervisor has been added successfully!') }}
            
            <div class="field">
                <label for="title">First Name *</label>
                {{ input('text', 'title', entry.title, {
                    id: 'title',
                    required: true
                }) }}
                {% if entry is defined and entry.hasErrors('title') %}
                    <span class="error">{{ entry.getFirstError('title') }}</span>
                {% endif %}
            </div>
            
            <div class="field">
                <label for="fields-fd_surname">Surname *</label>
                {{ input('text', 'fields[fd_surname]', entry.fd_surname, {
                    id: 'fields-fd_surname',
                    required: true
                }) }}
                {% if entry is defined and entry.hasErrors('fd_surname') %}
                    <span class="error">{{ entry.getFirstError('fd_surname') }}</span>
                {% endif %}
            </div>
            
            <div class="submit">
                <button type="submit" class="btn">Add Supervisor</button>
            </div>
        </form>
    </div>


    <div class="porters-list">
        <h2>Existing Porters</h2>
        {% set porters = craft.entries()
            .section('porters')
            .orderBy('title asc')
            .all() %}

        {% if porters|length %}
            <table class="porters-table">
                <thead>
                    <tr>
                        <th>First Name</th>
                        <th>Surname</th>
                    </tr>
                </thead>
                <tbody>
                    {% for porter in porters %}
                        <tr>
                            <td><a href="{{ porter.url }}">{{ porter.title }}</a></td>
                            <td>{{ porter.fd_surname }}</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% else %}
            <p><em>No porters have been added yet.</em></p>
        {% endif %}
    </div>

    {# Form to add new porter #}
    <div class="add-porter-form">
        <h2>Add New Porter</h2>
        
        {% if success is defined %}
            <div class="notification success">
                Porter has been saved successfully!
            </div>
        {% endif %}

        {% set entry = entry is defined ? entry : craft.entries.section('porters').one() ?? create('craft\\elements\\Entry') %}
        
        <form method="post" accept-charset="UTF-8">
            {{ csrfInput() }}
            {{ actionInput('entries/save-entry') }}
            {{ redirectInput('success?slug={slug}') }}
            {{ hiddenInput('sectionId', craft.app.entries.getSectionByHandle('porters').id) }}
            {{ hiddenInput('typeId', craft.app.entries.getSectionByHandle('porters').entryTypes[0].id) }}
            {{ hiddenInput('enabled', '1') }}
            {{ hiddenInput('slug', '__temp_' ~ now|date('U')) }}
            {{ successMessageInput('Porter has been added successfully!') }}
            
            <div class="field">
                <label for="title">First Name *</label>
                {{ input('text', 'title', entry.title, {
                    id: 'title',
                    required: true
                }) }}
                {% if entry is defined and entry.hasErrors('title') %}
                    <span class="error">{{ entry.getFirstError('title') }}</span>
                {% endif %}
            </div>
            
            <div class="field">
                <label for="fields-fd_surname">Surname *</label>
                {{ input('text', 'fields[fd_surname]', entry.fd_surname, {
                    id: 'fields-fd_surname',
                    required: true
                }) }}
                {% if entry is defined and entry.hasErrors('fd_surname') %}
                    <span class="error">{{ entry.getFirstError('fd_surname') }}</span>
                {% endif %}
            </div>
            
            <div class="submit">
                <button type="submit" class="btn">Add Porter</button>
            </div>
        </form>
    </div>
                </div>
            </div>
            
            <!-- Buildings & Departments Tab -->
            <div class="tab-pane" id="buildings-departments">
                <div class="settings-section">

    <div class="header-with-nav">
        <h1>Locations Management</h1>
        <div class="nav-links">
            <a href="{{ siteUrl('settings') }}" class="btn">← Back to Settings</a>
        </div>
    </div>


    <div id="locations-app">
        <div class="add-building-form">
            <h2>Add New Building</h2>
            
            {% set entry = entry is defined ? entry : craft.entries.section('locations').one() ?? create('craft\\elements\\Entry') %}
            
            <form method="post" accept-charset="UTF-8">
                {{ csrfInput() }}
                {{ actionInput('entries/save-entry') }}
                {{ redirectInput(siteUrl('settings/buildings-departments')) }}
                {{ hiddenInput('sectionId', craft.app.entries.getSectionByHandle('locations').id) }}
                {{ hiddenInput('typeId', craft.app.entries.getSectionByHandle('locations').entryTypes[0].id) }}
                {{ hiddenInput('enabled', '1') }}
                {{ hiddenInput('slug', '__temp_' ~ now|date('U')) }}
                
                <div class="field">
                    <label for="title">Building Name *</label>
                    {{ input('text', 'title', entry.title, {
                        id: 'title',
                        required: true
                    }) }}
                    {% if entry is defined and entry.hasErrors('title') %}
                        <span class="error">{{ entry.getFirstError('title') }}</span>
                    {% endif %}
                </div>
                
                <div class="submit">
                    <button type="submit" class="btn">Add Building</button>
                </div>
            </form>
        </div>

        <div class="buildings-list">
            <h2>Existing Locations</h2>
            {% set rootLocations = craft.entries()
                .section('locations')
                .level(1)
                .orderBy('title asc')
                .all() %}

            {% if rootLocations|length %}
                <div class="locations-tree">
                    {% for location in rootLocations %}
                        <div class="location-item level-1">
                            <div class="location-header">
                                <span class="location-title">{{ location.title }}</span>
                                <div class="location-actions">
                                    <a href="{{ location.cpEditUrl }}" class="btn small">Edit</a>
                                    <button class="btn small add-department-btn" @click="showAddForm({{ location.id }})">Add Department</button>
                                </div>
                            </div>
                            
                            <!-- Inline department form - shown/hidden with Vue -->
                            <div class="inline-department-form" v-if="activeBuildingId === {{ location.id }}">
                                <form method="post" accept-charset="UTF-8" @submit.prevent="submitChildForm($event, {{ location.id }})">
                                    {{ csrfInput() }}
                                    {{ actionInput('entries/save-entry') }}
                                    {{ redirectInput(siteUrl('settings/buildings-departments')) }}
                                    {{ hiddenInput('sectionId', craft.app.entries.getSectionByHandle('locations').id) }}
                                    {{ hiddenInput('typeId', craft.app.entries.getSectionByHandle('locations').entryTypes[1].id) }}
                                    {{ hiddenInput('enabled', '1') }}
                                    {{ hiddenInput('slug', '__temp_' ~ now|date('U')) }}
                                    
                                    {# Critical: This establishes the parent-child relationship in the Structure section #}
                                    {# In Craft CMS, the parentId parameter is used for Structure sections to establish hierarchy #}
                                    <input type="hidden" name="parentId" :value="activeBuildingId">
                                    
                                    <div class="field">
                                        <label for="department-title-${location.id}">Department Name *</label>
                                        <input type="text" name="title" id="department-title-${location.id}" required v-model="departmentName">
                                    </div>
                                    
                                    <div class="form-actions">
                                        <button type="submit" class="btn">Add Department</button>
                                        <button type="button" class="btn cancel-btn" @click="cancelAdd">Cancel</button>
                                    </div>
                                </form>
                            </div>
                            
                            {% set childLocations = craft.entries()
                                .section('locations')
                                .descendantOf(location)
                                .level(2)
                                .orderBy('title asc')
                                .all() %}
                                
                            {% if childLocations|length %}
                                <div class="location-children">
                                    {% for child in childLocations %}
                                        <div class="location-item level-2">
                                            <div class="location-header">
                                                <span class="location-title">{{ child.title }}</span>
                                                <div class="location-actions">
                                                    <a href="{{ child.cpEditUrl }}" class="btn small">Edit</a>
                                                </div>
                                            </div>
                                        </div>
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>
                    {% endfor %}
                </div>
            {% else %}
                <p><em>No locations have been added yet.</em></p>
            {% endif %}
        </div>
    </div>

                </div>
            </div>
            
            <!-- Task Types Tab -->
            <div class="tab-pane" id="task-types">
                <div class="settings-section">
                    <div class="header-with-nav">
                        <h1>Task Categories Management</h1>
                        <div class="nav-links">
                            <a href="{{ siteUrl('settings') }}" class="btn">← Back to Settings</a>
                        </div>
                    </div>

                    <div id="task-categories-app">
                        <div class="add-category-form">
                            <h2>Add New Task Category</h2>
                            
                            {% set entry = entry is defined ? entry : craft.entries.section('taskCategories').one() ?? create('craft\\elements\\Entry') %}
                            
                            <form method="post" accept-charset="UTF-8">
                                {{ csrfInput() }}
                                {{ actionInput('entries/save-entry') }}
                                {{ redirectInput(siteUrl('settings/task-types')) }}
                                {{ hiddenInput('sectionId', craft.app.entries.getSectionByHandle('taskCategories').id) }}
                                {{ hiddenInput('typeId', craft.app.entries.getSectionByHandle('taskCategories').entryTypes[0].id) }}
                                {{ hiddenInput('enabled', '1') }}
                                {{ hiddenInput('slug', '__temp_' ~ now|date('U')) }}
                                
                                <div class="field">
                                    <label for="title">Category Name *</label>
                                    {{ input('text', 'title', entry.title, {
                                        id: 'title',
                                        required: true
                                    }) }}
                                    {% if entry is defined and entry.hasErrors('title') %}
                                        <span class="error">{{ entry.getFirstError('title') }}</span>
                                    {% endif %}
                                </div>
                                
                                <div class="submit">
                                    <button type="submit" class="btn">Add Category</button>
                                </div>
                            </form>
                        </div>

                        <div class="categories-list">
                            <h2>Existing Task Categories</h2>
                            {% set rootCategories = craft.entries()
                                .section('taskCategories')
                                .level(1)
                                .orderBy('title asc')
                                .all() %}

                            {% if rootCategories|length %}
                                <div class="categories-tree">
                                    {% for category in rootCategories %}
                                        <div class="category-item level-1">
                                            <div class="category-header">
                                                <span class="category-title">{{ category.title }}</span>
                                                <div class="category-actions">
                                                    <a href="{{ category.cpEditUrl }}" class="btn small">Edit</a>
                                                    <button class="btn small add-subcategory-btn" @click="showAddForm({{ category.id }})">Add Subcategory</button>
                                                </div>
                                            </div>
                                            
                                            <!-- Inline subcategory form - shown/hidden with Vue -->
                                            <div class="inline-subcategory-form" v-if="activeCategoryId === {{ category.id }}">
                                                <form method="post" accept-charset="UTF-8" @submit.prevent="submitChildForm($event, {{ category.id }})">
                                                    {{ csrfInput() }}
                                                    {{ actionInput('entries/save-entry') }}
                                                    {{ hiddenInput('sectionId', craft.app.entries.getSectionByHandle('taskCategories').id) }}
                                                    {{ hiddenInput('typeId', craft.app.entries.getSectionByHandle('taskCategories').entryTypes[0].id) }}
                                                    {{ hiddenInput('enabled', '1') }}
                                                    {{ hiddenInput('slug', '__temp_' ~ now|date('U')) }}
                                                    
                                                    {# Critical: This establishes the parent-child relationship in the Structure section #}
                                                    <input type="hidden" name="parentId" :value="activeCategoryId">
                                                    
                                                    <div class="field">
                                                        <label for="subcategory-title-${category.id}">Subcategory Name *</label>
                                                        <input type="text" name="title" id="subcategory-title-${category.id}" required v-model="subcategoryName">
                                                    </div>
                                                    
                                                    <div class="form-actions">
                                                        <button type="submit" class="btn">Add Subcategory</button>
                                                        <button type="button" class="btn cancel-btn" @click="cancelAdd">Cancel</button>
                                                    </div>
                                                </form>
                                            </div>
                                            
                                            {% set childCategories = craft.entries()
                                                .section('taskCategories')
                                                .descendantOf(category)
                                                .level(2)
                                                .orderBy('title asc')
                                                .all() %}
                                                
                                            {% if childCategories|length %}
                                                <div class="category-children">
                                                    {% for child in childCategories %}
                                                        <div class="category-item level-2">
                                                            <div class="category-header">
                                                                <span class="category-title">{{ child.title }}</span>
                                                                <div class="category-actions">
                                                                    <a href="{{ child.cpEditUrl }}" class="btn small">Edit</a>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    {% endfor %}
                                                </div>
                                            {% endif %}
                                        </div>
                                    {% endfor %}
                                </div>
                            {% else %}
                                <p><em>No task categories have been added yet.</em></p>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <style>
        /* =============== General Layout Styles =============== */
        .settings-page h1 {
            margin-bottom: 30px;
        }
        
        /* =============== Tab Navigation =============== */
        .settings-navigation {
            margin-bottom: 30px;
        }
        
        .nav-tabs {
            display: flex;
            list-style: none;
            padding: 0;
            margin: 0;
            border-bottom: 1px solid #dee2e6;
        }
        
        .nav-item {
            margin-bottom: -1px;
        }
        
        .nav-link {
            display: block;
            padding: 10px 15px;
            margin-right: 2px;
            border: 1px solid transparent;
            border-top-left-radius: 4px;
            border-top-right-radius: 4px;
            text-decoration: none;
        }
        
        .nav-link.active {
            background-color: #fff;
            border-color: #dee2e6 #dee2e6 #fff;
            color: #0d6efd;
        }
        
        .tab-content {
            padding: 20px 0;
        }
        
        .tab-pane {
            display: none;
        }
        
        .tab-pane.active {
            display: block;
        }
        
        /* =============== Notifications =============== */
        .notification {
            padding: 12px 15px;
            margin-bottom: 15px;
            border-radius: 4px;
            border-left: 4px solid;
        }
        
        .notification.success {
            background-color: #d4edda;
            border-color: #28a745;
            color: #155724;
        }
        
        /* =============== Form Styles =============== */
        .field {
            margin-bottom: 15px;
        }
        
        .form-actions {
            display: flex;
            margin-top: 15px;
        }
        
        .submit {
            margin-top: 20px;
        }
        
        .cancel-btn {
            background-color: #6c757d;
            margin-left: 10px;
        }
        
        .add-building-form,
        .add-category-form {
            max-width: 600px;
            margin-bottom: 30px;
        }
        
        /* =============== Hierarchical Tree Styles =============== */
        /* Common styles for both locations and categories */
        .locations-tree,
        .categories-tree {
            margin-top: 20px;
        }
        
        .location-item,
        .category-item {
            margin-bottom: 10px;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            background-color: #f9f9f9;
            transition: all 0.2s ease;
        }
        
        .location-item:hover,
        .category-item:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .location-header,
        .category-header {
            padding: 12px 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .location-title,
        .category-title {
            font-weight: 600;
            font-size: 1.1em;
        }
        
        .location-actions,
        .category-actions {
            display: flex;
            gap: 8px;
        }
        
        .location-children,
        .category-children {
            padding: 0 0 10px 30px;
        }
        
        /* Hierarchy level styling */
        .level-1 {
            background-color: #f5f5f5;
        }
        
        .level-2 {
            background-color: #ffffff;
            border-left: 3px solid #0d6efd;
            margin-top: 8px;
        }
        
        /* Inline form styles */
        .inline-department-form,
        .inline-subcategory-form {
            padding: 15px 30px;
            background-color: #f0f7ff;
            border-top: 1px solid #cfdaeb;
            margin-top: 5px;
            animation: fadeIn 0.3s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* =============== Miscellaneous Components =============== */
        .section-cards {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }
        
        .settings-card {
            flex: 1;
            min-width: 300px;
            background-color: #f9f9f9;
            border: 1px solid #eee;
            border-radius: 5px;
            padding: 20px;
        }
        
        .settings-card h2 {
            margin-top: 0;
            color: #0d6efd;
        }
        
        .card-count {
            margin: 15px 0;
            font-size: 0.9em;
            color: #666;
        }
        
        .card-actions {
            margin-top: 20px;
        }
        
        .section-notice {
            background-color: #f8f9fa;
            border-left: 4px solid #0d6efd;
            padding: 15px;
            margin: 20px 0;
        }
    </style>
    
    {# Load Vue.js CDN #}
    <script src="https://unpkg.com/vue@3.2.31/dist/vue.global.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tab navigation
            initTabNavigation();
            
            // Initialize Vue apps for hierarchical data management
            initHierarchicalApps();
        });

        /**
         * Initialize tab navigation functionality
         */
        function initTabNavigation() {
            const tabs = document.querySelectorAll('.nav-link');
            
            tabs.forEach(tab => {
                tab.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Hide all tab panes
                    document.querySelectorAll('.tab-pane').forEach(pane => {
                        pane.classList.remove('active');
                    });
                    
                    // Deactivate all tabs
                    tabs.forEach(t => {
                        t.classList.remove('active');
                    });
                    
                    // Activate clicked tab
                    this.classList.add('active');
                    
                    // Show corresponding pane
                    const target = this.getAttribute('href');
                    document.querySelector(target).classList.add('active');
                });
            });
        }

        /**
         * Creates a hierarchical data management app
         */
        function createHierarchicalApp(options) {
            const { 
                activeItemIdProperty, 
                childNameProperty,
                addSuccessMessage,
                addButtonLabel,
                formClasses 
            } = options;
            
            const { createApp } = Vue;
            
            return createApp({
                data() {
                    return {
                        [activeItemIdProperty]: null,
                        [childNameProperty]: '',
                    }
                },
                methods: {
                    showAddForm(itemId) {
                        // Toggle form visibility
                        if (this[activeItemIdProperty] === itemId) {
                            this[activeItemIdProperty] = null;
                        } else {
                            this[activeItemIdProperty] = itemId;
                            this[childNameProperty] = '';
                        }
                    },
                    
                    cancelAdd() {
                        this[activeItemIdProperty] = null;
                        this[childNameProperty] = '';
                    },
                    
                    submitChildForm(e, parentId) {
                        // Validate the form
                        if (!this[childNameProperty].trim()) {
                            alert(`Please enter a ${childNameProperty.replace('Name', '')} name`);
                            return;
                        }
                        
                        // Get form data and submit via AJAX
                        const formData = new FormData(e.target);
                        
                        fetch('', {
                            method: 'POST',
                            body: formData,
                        })
                        .then(response => response.text())
                        .then(html => {
                            // Show success notification
                            this.showSuccessNotification(e.target, addSuccessMessage);
                            
                            // Refresh the children list for this parent
                            this.refreshChildrenList(parentId);
                        })
                        .catch(error => {
                            console.error('Error submitting form:', error);
                            alert(`There was an error. Please try again.`);
                        });
                    },
                    
                    showSuccessNotification(formElement, message) {
                        // Create and display notification
                        const notification = document.createElement('div');
                        notification.className = 'notification success';
                        notification.innerHTML = message;
                        
                        // Insert notification near the form
                        const formParent = formElement.closest(formClasses);
                        formParent.prepend(notification);
                        
                        // Remove notification after delay
                        setTimeout(() => notification.remove(), 2000);
                    },
                    
                    refreshChildrenList(parentId) {
                        // Force a refresh by toggling the active state
                        const tempId = this[activeItemIdProperty];
                        this[activeItemIdProperty] = null;
                        
                        setTimeout(() => {
                            this[activeItemIdProperty] = null;
                            this[childNameProperty] = '';
                        }, 100);
                    }
                }
            });
        }

        /**
         * Initialize all hierarchical data management apps
         */
        function initHierarchicalApps() {
            // Location Management App
            const locationsApp = createHierarchicalApp({
                activeItemIdProperty: 'activeBuildingId',
                childNameProperty: 'departmentName',
                addSuccessMessage: 'Department has been added successfully!',
                addButtonLabel: 'Add Department',
                formClasses: '.inline-department-form'
            });
            
            // Task Categories App
            const categoriesApp = createHierarchicalApp({
                activeItemIdProperty: 'activeCategoryId',
                childNameProperty: 'subcategoryName',
                addSuccessMessage: 'Subcategory has been added successfully!',
                addButtonLabel: 'Add Subcategory',
                formClasses: '.inline-subcategory-form'
            });
            
            // Mount apps if containers exist
            const locationsAppContainer = document.getElementById('locations-app');
            if (locationsAppContainer) {
                locationsApp.mount('#locations-app');
            }
            
            const categoriesAppContainer = document.getElementById('task-categories-app');
            if (categoriesAppContainer) {
                categoriesApp.mount('#task-categories-app');
            }
        }
    </script>
{% endblock %}
